diff --git a/0-app/silent_ot_recv.cu b/0-app/silent_ot_recv.cu
index 6298f37..10caf13 100644
--- a/0-app/silent_ot_recv.cu
+++ b/0-app/silent_ot_recv.cu
@@ -76,18 +76,14 @@ void SilentOTRecver::get_choice_vector() {
 }
 
 void SilentOTRecver::pprf_expand() {
-  // init keys
-  uint64_t k0 = 3242342, k1 = 8993849;
-  uint8_t k0_blk[16] = {0};
-  uint8_t k1_blk[16] = {0};
-  memcpy(&k0_blk[8], &k0, sizeof(k0));
-  memcpy(&k1_blk[8], &k1, sizeof(k1));
-
-  Expander *expandLeft, *expandRight;
+  // init hash keys
+  uint32_t k0_blk[4] = {3242342};
+  uint32_t k1_blk[4] = {8993849};
+
+  Expander *expander;
   switch (mConfig.expander) {
     case AesHash_t:
-      expandLeft = new AesHash(k0_blk);
-      expandRight = new AesHash(k1_blk);
+      expander = new AesHash((uint8_t*) k0_blk, (uint8_t*) k1_blk);
   }
 
   // init buffers
@@ -113,8 +109,7 @@ void SilentOTRecver::pprf_expand() {
     outPtr = outBuffer->data();
 
     uint64_t packedWidth = mConfig.nTree * width;
-    expandLeft->expand_async(outPtr, leftNodes, inPtr, packedWidth, 0, stream[0]);
-    expandRight->expand_async(outPtr, rightNodes, inPtr, packedWidth, 1, stream[1]);
+    expander->expand_async(outPtr, leftNodes, rightNodes, inPtr, packedWidth, stream[0]);
 
     cudaStreamWaitEvent(stream[0], expandEvents.at(d-1));
     cudaStreamWaitEvent(stream[1], expandEvents.at(d-1));
@@ -167,8 +162,7 @@ void SilentOTRecver::pprf_expand() {
   cudaStreamDestroy(stream[1]);
   puncVector = *outBuffer;
 
-  delete expandLeft;
-  delete expandRight;
+  delete expander;
 }
 
 void SilentOTRecver::mult_compress() {
diff --git a/0-app/silent_ot_send.cu b/0-app/silent_ot_send.cu
index dd9f1db..5851e4f 100644
--- a/0-app/silent_ot_send.cu
+++ b/0-app/silent_ot_send.cu
@@ -45,17 +45,13 @@ void SilentOTSender::base_ot() {
 
 void SilentOTSender::pprf_expand() {
   // init hash keys
-  uint64_t k0 = 3242342, k1 = 8993849;
-  uint8_t k0_blk[16] = {0};
-  uint8_t k1_blk[16] = {0};
-  memcpy(&k0_blk[8], &k0, sizeof(k0));
-  memcpy(&k1_blk[8], &k1, sizeof(k1));
+  uint32_t k0_blk[4] = {3242342};
+  uint32_t k1_blk[4] = {8993849};
 
-  Expander *expandLeft, *expandRight;
+  Expander *expander;
   switch (mConfig.expander) {
     case AesHash_t:
-      expandLeft = new AesHash(k0_blk);
-      expandRight = new AesHash(k1_blk);
+      expander = new AesHash((uint8_t*) k0_blk, (uint8_t*) k1_blk);
   }
 
   // init buffers
@@ -91,8 +87,7 @@ void SilentOTSender::pprf_expand() {
     OTblock *outPtr = outBuffer->data();
 
     uint64_t packedWidth = mConfig.nTree * width;
-    expandLeft->expand_async(outPtr, leftNodes, inPtr, packedWidth, 0, stream[0]);
-    expandRight->expand_async(outPtr, rightNodes, inPtr, packedWidth, 1, stream[1]);
+    expander->expand_async(outPtr, leftNodes, rightNodes, inPtr, packedWidth, stream[0]);
 
     leftNodes.sum_async(mConfig.nTree, width / 2, stream[0]);
     rightNodes.sum_async(mConfig.nTree, width / 2, stream[1]);
@@ -136,8 +131,7 @@ void SilentOTSender::pprf_expand() {
 
   fullVector = *outBuffer;
 
-  delete expandLeft;
-  delete expandRight;
+  delete expander;
 }
 
 void SilentOTSender::mult_compress() {
diff --git a/2-mod/aes_hash.cu b/2-mod/aes_hash.cu
index 7a4a579..ec6b0c8 100644
--- a/2-mod/aes_hash.cu
+++ b/2-mod/aes_hash.cu
@@ -11,34 +11,31 @@
 // state - array holding the intermediate results during decryption.
 typedef uint8_t state_t[4][4];
 
-AesHash::AesHash(uint8_t *key) {
-  AES_ctx encExpKey;
-  AES_ctx decExpKey;
-  AesHash::expand_encKey(encExpKey.roundKey, key);
-  AesHash::expand_decKey(decExpKey.roundKey, key);
-  cudaError_t err = cudaMalloc(&encExpKey_d, sizeof(encExpKey.roundKey));
-  if (err != cudaSuccess)
-    fprintf(stderr, "Aes() enc: %s\n", cudaGetErrorString(err));
-  cudaMemcpy(encExpKey_d, encExpKey.roundKey, sizeof(encExpKey.roundKey), cudaMemcpyHostToDevice);
-  err = cudaMalloc(&decExpKey_d, sizeof(decExpKey.roundKey));
-  if (err != cudaSuccess)
-    fprintf(stderr, "Aes() dec: %s\n", cudaGetErrorString(err));
-  cudaMemcpy(decExpKey_d, decExpKey.roundKey, sizeof(decExpKey.roundKey), cudaMemcpyHostToDevice);
+AesHash::AesHash(uint8_t *newLeft, uint8_t *newRight) {
+  AES_ctx leftExpKey, rightExpKey;
+
+  AesHash::expand_encKey(leftExpKey.roundKey, newLeft);
+  cudaMalloc(&keyLeft_d, sizeof(leftExpKey.roundKey));
+  cudaMemcpy(keyLeft_d, leftExpKey.roundKey, sizeof(leftExpKey.roundKey), cudaMemcpyHostToDevice);
+
+  AesHash::expand_encKey(rightExpKey.roundKey, newRight);
+  cudaMalloc(&keyRight_d, sizeof(rightExpKey.roundKey));
+  cudaMemcpy(keyRight_d, rightExpKey.roundKey, sizeof(rightExpKey.roundKey), cudaMemcpyHostToDevice);
 }
 
 AesHash::~AesHash() {
-  if (encExpKey_d) cudaFree(encExpKey_d);
-  if (decExpKey_d) cudaFree(decExpKey_d);
+  if (keyLeft_d) cudaFree(keyLeft_d);
+  if (keyRight_d) cudaFree(keyRight_d);
 }
 
-void AesHash::expand_async(OTblock *interleaved, GPUdata &separated, OTblock *input_d, uint64_t width, int dir, cudaStream_t &s) {
+void AesHash::expand_async(OTblock *inter, GPUdata &left, GPUdata &right, OTblock *input_d, uint64_t width, cudaStream_t &s) {
   static int thread_per_aesblock = 4;
-  uint64_t paddedBytes = (width / 2) * sizeof(*interleaved);
+  uint64_t paddedBytes = (width / 2) * sizeof(*inter);
   if (paddedBytes % AES_PADDING != 0)
     paddedBytes += AES_PADDING - (paddedBytes % AES_PADDING);
   uint64_t numAesBlocks = paddedBytes / 16;
-  uint64_t grid = numAesBlocks * thread_per_aesblock / AES_BSIZE;
-  aesExpand128<<<grid, AES_BSIZE, 0, s>>>((uint32_t*) encExpKey_d, interleaved, (uint32_t*) separated.data(), (uint32_t*) input_d, dir, width);
+  dim3 grid(numAesBlocks * thread_per_aesblock / AES_BSIZE, 2);
+  aesExpand128<<<grid, AES_BSIZE, 0, s>>>((uint32_t*) keyLeft_d, (uint32_t*) keyRight_d, inter, (uint32_t*) left.data(), (uint32_t*) right.data(), (uint32_t*) input_d, width);
 }
 
 static uint32_t myXor(uint32_t num1, uint32_t num2) {
diff --git a/2-mod/expander.h b/2-mod/expander.h
index 2f50076..2e85a6c 100644
--- a/2-mod/expander.h
+++ b/2-mod/expander.h
@@ -8,22 +8,22 @@ enum ExpanderType { AesHash_t };
 
 class Expander {
 public:
-  virtual void expand_async(OTblock *output_d, GPUdata &m, OTblock *input_d,
-    uint64_t width, int dir, cudaStream_t &s) = 0;
+  virtual void expand_async(OTblock *inter, GPUdata &left, GPUdata &right,
+    OTblock *input_d, uint64_t width, cudaStream_t &s) = 0;
 };
 
 class AesHash : public Expander {
 private:
-  uint8_t *encExpKey_d = nullptr;
-  uint8_t *decExpKey_d = nullptr;
+  uint8_t *keyLeft_d = nullptr;
+  uint8_t *keyRight_d = nullptr;
   void expand_encKey(uint8_t *encExpKey, uint8_t *key);
   void expand_decKey(uint8_t *decExpKey, uint8_t *key);
 
 public:
-  AesHash(uint8_t *newkey);
+  AesHash(uint8_t *newleft, uint8_t *newRight);
   virtual ~AesHash();
-  virtual void expand_async(OTblock *output_d, GPUdata &m, OTblock *input_d,
-    uint64_t width, int dir, cudaStream_t &s);
+  virtual void expand_async(OTblock *inter, GPUdata &left, GPUdata &right,
+    OTblock *input_d, uint64_t width, cudaStream_t &s);
   
   // void decrypt(GPUdata &msg);
   // void encrypt(GPUdata &msg);
diff --git a/3-dev/aes_expand.cu b/3-dev/aes_expand.cu
index 74f7304..9243a0d 100644
--- a/3-dev/aes_expand.cu
+++ b/3-dev/aes_expand.cu
@@ -34,14 +34,16 @@
 #include "aes_expand.h"
 
 __global__
-void aesExpand128(uint32_t *aesKey, OTblock *interleaved, uint32_t *separated,
-	uint32_t *inData, int expandDir, uint64_t width) {
+void aesExpand128(uint32_t *keyLeft, uint32_t *keyRight, OTblock *inter, uint32_t *left, uint32_t *right,
+	unsigned *inData, uint64_t width) {
 	uint32_t bx		= blockIdx.x;
     uint32_t tx		= threadIdx.x;
     uint32_t mod4tx = tx % 4;
     uint32_t int4tx = tx / 4;
     uint32_t idx2	= int4tx * 4;
 	int x;
+	int expandDir = blockIdx.y;
+	uint32_t *aesKey = expandDir == 0 ? keyLeft : keyRight;
 
     __shared__ UByte4 stageBlock1[AES_BSIZE];
 	__shared__ UByte4 stageBlock2[AES_BSIZE];
@@ -294,10 +296,9 @@ void aesExpand128(uint32_t *aesKey, OTblock *interleaved, uint32_t *separated,
 	uint64_t pairId =  (bx * AES_BSIZE + tx) / elemPerNode;
 	uint64_t leavesId = 2 * pairId + expandDir;
 	if (leavesId < width) {
-		interleaved[leavesId].data[tx % elemPerNode] = stageBlock2[tx].uival;
-	}
-	if (separated != nullptr) {
-		uint64_t offset = (pairId*sizeof(OTblock)+4*(tx%elemPerNode)) / sizeof(*separated);
-		separated[offset] = stageBlock2[tx].uival;
+		inter[leavesId].data[tx % elemPerNode] = stageBlock2[tx].uival;
 	}
+	uint32_t *separated = expandDir == 0 ? left : right;
+	uint64_t offset = (pairId*sizeof(OTblock)+4*(tx%elemPerNode)) / sizeof(*separated);
+	separated[offset] = stageBlock2[tx].uival;
 }
diff --git a/3-dev/aes_expand.h b/3-dev/aes_expand.h
index bb3e8da..a3d7d7a 100644
--- a/3-dev/aes_expand.h
+++ b/3-dev/aes_expand.h
@@ -4,7 +4,7 @@
 #include "util.h"
 
 __global__
-void aesExpand128(unsigned *aesKey, OTblock *interleaved, uint32_t *separated,
-	unsigned *inData, int expandDir, uint64_t width);
+void aesExpand128(uint32_t *keyLeft, uint32_t *keyRight, OTblock *inter, uint32_t *left, uint32_t *right,
+	unsigned *inData, uint64_t width);
 
 #endif
